{
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "sort-imports-es6-autofix",
        "@typescript-eslint",
        "jsdoc"
    ],
    "parserOptions": {
        "sourceType": "module",
        "project": "tsconfig.json",
        "createDefaultProgram": true
    },
    "rules": {
        /* Possible Errors */
        "for-direction": "error",
        "getter-return": "off", // Checked by Typescript - ts(2378)
        "no-async-promise-executor": "error",
        "no-await-in-loop": "off", // Often intentional
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-console": "warn",
        "no-constant-condition": "warn",
        "no-control-regex": "warn",
        "no-debugger": "warn",
        "no-dupe-args": "off", // Checked by Typescript - ts(2300)
        "no-dupe-keys": "off", // Checked by Typescript - ts(1117)
        "no-duplicate-case": "error",
        "no-empty": "warn",
        "no-empty-character-class": "error",
        "no-ex-assign": "warn",
        "no-extra-boolean-cast": "warn",
        "no-extra-parens": "off", // Conflicts with TS rule
        "no-extra-semi": "warn",
        "no-func-assign": "warn",
        "no-import-assign": "warn",
        "no-inner-declarations": "warn",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "warn",
        "no-misleading-character-class": "error",
        "no-obj-calls": "error",
        "no-prototype-builtins": "warn",
        "no-regex-spaces": "warn",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "warn",
        "no-unexpected-multiline": "warn",
        "no-unreachable": "off", // Checked by Typescript - ts(7027)
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "require-atomic-updates": "error",
        "use-isnan": "error",
        "valid-typeof": "off", // Checked by Typescript - ts(2367)

        /* Best Practices */
        "accessor-pairs": "warn",
        "array-callback-return": "warn",
        "block-scoped-var": "warn",
        "class-methods-use-this": "off", // Often desirable for implementation/API design
        "complexity": "warn",
        "consistent-return": "off", // Not needed with TS
        "curly": "off", // Too annoying
        "default-case": "warn",
        "default-param-last": "warn",
        "dot-location": ["warn", "property"],
        "dot-notation": "warn",
        "eqeqeq": "error",
        "guard-for-in": "warn",
        "max-classes-per-file": "off", // Occasionally want this
        "no-alert": "error",
        "no-caller": "error",
        "no-case-declarations": "warn",
        "no-div-regex": "warn",
        "no-else-return": "warn",
        "no-empty-function": "off", // Conflicts with TS rule
        "no-empty-pattern": "error",
        "no-eq-null": "warn",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "warn",
        "no-extra-label": "warn",
        "no-fallthrough": "warn",
        "no-floating-decimal": "error",
        "no-global-assign": "error",
        "no-implicit-coercion": "warn",
        "no-implicit-globals": "warn", // Not applicable when using modules
        "no-implied-eval": "error",
        "no-invalid-this": "error",
        "no-iterator": "error",
        "no-labels": "warn",
        "no-lone-blocks": "warn",
        "no-loop-func": "warn",
        "no-magic-numbers": "off", // Conflicts with TS rule
        "no-multi-spaces": "warn",
        "no-multi-str": "warn",
        "no-new": "warn",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "off", // Too annoying
        "no-proto": "error",
        "no-redeclare": "off", // This is already checked by Typescript.
        "no-restricted-properties": "off", // None needed
        "no-return-assign": "off", // Useful in arrow functions
        "no-return-await": "warn",
        "no-script-url": "error",
        "no-self-assign": "warn",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-unmodified-loop-condition": "warn",
        "no-unused-expressions": "warn",
        "no-unused-labels": "warn",
        "no-useless-call": "warn",
        "no-useless-catch": "warn",
        "no-useless-concat": "warn",
        "no-useless-escape": "warn",
        "no-useless-return": "warn",
        "no-void": "error",
        "no-warning-comments": "off", // Don"t want this listed as lint errors/warnings
        "no-with": "error",
        "prefer-named-capture-group": "off", // Annoying
        "prefer-promise-reject-errors": "error",
        "prefer-regex-literals": "error",
        "radix": "off", // Not needed post ES5
        "require-await": "off", // Conflicts with TS rule
        "require-unicode-regexp": "error",
        "vars-on-top": "warn",
        "wrap-iife": "warn",
        "yoda": "warn",

        /* Strict Mode */
        "strict": "error",

        /* Variables */
        "init-declarations": "off", // Handled by TS
        "no-delete-var": "error",
        "no-label-var": "error",
        "no-restricted-globals": "off", // Not needed
        "no-shadow": "off", // Annoying
        "no-shadow-restricted-names": "error",
        "no-undef": "off", // This is checked by Typescript using the option `strictNullChecks`.
        "no-undef-init": "warn",
        "no-undefined": "off", // Undefined is key in TS
        "no-unused-vars": "off", // Conflicts with TS rule
        "no-use-before-define": "off", // Conflicts with TS rule

        /* Node.js and CommonJS */
        "callback-return": "error",
        "global-require": "warn",
        "handle-callback-err": "warn",
        "no-buffer-constructor": "error",
        "no-mixed-requires": "error",
        "no-new-require": "error",
        "no-path-concat": "warn",
        "no-process-env": "off", // Annoying
        "no-process-exit": "warn",
        "no-restricted-modules": "off", // Not needed
        "no-sync": "warn",

        /* Stylistic Issues */
        "array-bracket-newline": ["warn", "consistent"],
        "array-bracket-spacing": ["warn", "always"],
        "array-element-newline": ["warn", "consistent"],
        "block-spacing": "warn",
        "brace-style": "off", // Conflicts with TS rule
        "camelcase": "off", // Conflicts with TS rule
        "capitalized-comments": "off", // Annoying
        "comma-dangle": ["warn", {
            "arrays": "always-multiline",
            "objects": "always-multiline",
            "imports": "always-multiline",
            "exports": "always-multiline",
            "functions": "always-multiline"
        }],
        "comma-spacing": "warn",
        "comma-style": "warn",
        "computed-property-spacing": "warn",
        "consistent-this": "off", // Obsolete by @typescript-eslint/no-this-alias
        "eol-last": "warn",
        "func-call-spacing": "warn",
        "func-name-matching": "error",
        "func-names": "warn",
        "func-style": ["warn", "declaration", { "allowArrowFunctions": true }],
        "function-call-argument-newline": ["warn", "consistent"],
        "function-paren-newline": ["warn", "consistent"],
        "id-blacklist": "off", // Not needed
        "id-length": "off", // Not needed
        "id-match": "off", // Not needed
        "implicit-arrow-linebreak": "warn",
        "indent": "off", // Conflicts with TS rule
        "jsx-quotes": "off", // Not applicable
        "key-spacing": "warn",
        "keyword-spacing": "warn",
        "line-comment-position": "off", // Want to allow both
        "linebreak-style": "warn",
        "lines-around-comment": "off", // Annoying
        "lines-between-class-members": "off", // Interferes with TypeScript overload method signatures
        "max-depth": "off", // Annoying
        "max-len": ["warn", { "code": 170 }],
        "max-lines": "off", // Annoying
        "max-lines-per-function": "off", // Annoying
        "max-nested-callbacks": "off", // Annoying
        "max-params": "off", // Annoying
        "max-statements": "off", // Annoying
        "max-statements-per-line": "off", // Annoying
        "multiline-comment-style": "off", // Want to allow all
        "multiline-ternary": ["warn", "always-multiline"],
        "new-cap": "off", // Needed for decorators
        "new-parens": "error",
        "newline-per-chained-call": "warn",
        "no-array-constructor": "off", // Conflicts with TS rule
        "no-bitwise": "error",
        "no-continue": "off", // Useful
        "no-inline-comments": "off", // Useful in some cases
        "no-lonely-if": "warn",
        "no-mixed-operators": "warn",
        "no-mixed-spaces-and-tabs": "warn",
        "no-multi-assign": "off", // Useful
        "no-multiple-empty-lines": ["warn", { "max": 1, "maxBOF": 0, "maxEOF": 0 }],
        "no-negated-condition": "off", // Sometimes more clear
        "no-nested-ternary": "warn",
        "no-new-object": "error",
        "no-plusplus": "off", // Very useful
        "no-restricted-syntax": "off", // Not needed
        "no-tabs": "warn",
        "no-ternary": "off", // Useful
        "no-trailing-spaces": "warn",
        "no-underscore-dangle": "off", // Sometimes needed for fields backing properties
        "no-unneeded-ternary": "warn",
        "no-whitespace-before-property": "warn",
        "nonblock-statement-body-position": "warn",
        "object-curly-newline": "warn",
        "object-curly-spacing": ["warn", "always"],
        "object-property-newline": "off", // Single-line sometimes clearer
        "one-var": "off", // Less useful with TS
        "one-var-declaration-per-line": "off", // Less useful with TS
        "operator-assignment": "warn",
        "operator-linebreak": ["warn", "before"],
        "padded-blocks": ["warn", "never"],
        "padding-line-between-statements": "warn",
        "prefer-object-spread": "warn",
        "quote-props": ["warn", "as-needed"],
        "quotes": "off", // Conflicts with TS rule
        "semi": "off", // Conflicts with TS rule
        "semi-spacing": "warn",
        "semi-style": "warn",
        "sort-keys": "off", // Often key order is logical
        "sort-vars": "warn",
        "space-before-blocks": "warn",
        "space-before-function-paren": ["warn", { "anonymous": "always", "named": "never", "asyncArrow": "always" }],
        "space-in-parens": "warn",
        "space-infix-ops": "warn",
        "space-unary-ops": "warn",
        "spaced-comment": "warn",
        "switch-colon-spacing": "warn",
        "template-tag-spacing": "warn",
        "unicode-bom": "warn",
        "wrap-regex": "warn",

        /* ECMAScript 6 */
        "arrow-body-style": "warn",
        "arrow-parens": ["warn", "as-needed"],
        "arrow-spacing": "warn",
        "constructor-super": "error",
        "generator-star-spacing": "warn",
        "no-class-assign": "warn",
        "no-confusing-arrow": "off", // Annoying
        "no-const-assign": "off", // Checked by Typescript - ts(2588)
        "no-dupe-class-members": "off", // This is already checked by Typescript.
        "no-duplicate-imports": "warn",
        "no-new-symbol": "off", // Checked by Typescript - ts(2588)
        "no-restricted-imports": "off", // Not needed
        "no-this-before-super": "off", // Checked by Typescript - ts(2376)
        "no-useless-computed-key": "warn",
        "no-useless-constructor": "off", // Needed for constructor properties
        "no-useless-rename": "warn",
        "no-var": "error",
        "object-shorthand": "warn",
        "prefer-arrow-callback": "warn",
        "prefer-const": "warn",
        "prefer-destructuring": "off", // Annoying
        "prefer-numeric-literals": "warn",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "warn",
        "require-yield": "error",
        "rest-spread-spacing": "warn",
        "sort-imports": "off", // Conflicts with sort-imports-es6-autofix
        "symbol-description": "warn",
        "template-curly-spacing": "warn",
        "yield-star-spacing": "warn",

        /* sort-imports-es6-autofix */
        "sort-imports-es6-autofix/sort-imports-es6": "warn",
        
        /* typescript-eslint */
        "@typescript-eslint/adjacent-overload-signatures": "warn",
        "@typescript-eslint/array-type": "warn",
        "@typescript-eslint/await-thenable": "warn",
        "@typescript-eslint/ban-ts-ignore": "warn",
        "@typescript-eslint/ban-types": ["warn", {
            "types": {
                "String": {
                    "message": "Use string instead",
                    "fixWith": "string"
                },
                "Number": {
                    "message": "Use number instead",
                    "fixWith": "number"
                },
                "Boolean": {
                    "message": "Use boolean instead",
                    "fixWith": "boolean"
                },
                "BigInt": {
                    "message": "Use bigint instead",
                    "fixWith": "bigint"
                },
                "Symbol": {
                    "message": "Use symbol instead",
                    "fixWith": "symbol"
                }
            }
        }],
        "@typescript-eslint/brace-style": "warn",
        "@typescript-eslint/camelcase": "warn",
        "@typescript-eslint/class-name-casing": "warn",
        "@typescript-eslint/consistent-type-assertions": "warn",
        "@typescript-eslint/consistent-type-definitions": "warn",
        "@typescript-eslint/explicit-function-return-type": ["warn", { "allowExpressions": true }],
        "@typescript-eslint/explicit-member-accessibility": "warn",
        "@typescript-eslint/func-call-spacing": "warn",
        "@typescript-eslint/generic-type-naming": ["warn", "^[KTUV][a-zA-Z0-9]*$"],
        "@typescript-eslint/indent": "warn",
        "@typescript-eslint/interface-name-prefix": "warn",
        "@typescript-eslint/member-delimiter-style": "warn",
        "@typescript-eslint/member-naming": "off", // No per-visibility naming convention desired
        "@typescript-eslint/member-ordering": "warn",
        "@typescript-eslint/no-array-constructor": "warn",
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/no-empty-interface": "warn",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-extra-parens": "off", // Clarity is better
        "@typescript-eslint/no-extraneous-class": "warn",
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/no-for-in-array": "warn",
        "@typescript-eslint/no-inferrable-types": ["warn", { "ignoreParameters": true, "ignoreProperties": true }],
        "@typescript-eslint/no-magic-numbers": "off", // Too annoying
        "@typescript-eslint/no-misused-new": "warn",
        "@typescript-eslint/no-misused-promises": "warn",
        "@typescript-eslint/no-namespace": "off", // Needed for declaration merging
        "@typescript-eslint/no-non-null-assertion": "off", // Occasionally necessary
        "@typescript-eslint/no-parameter-properties": "off", // Can be useful
        "@typescript-eslint/no-require-imports": "warn",
        "@typescript-eslint/no-this-alias": "warn",
        "@typescript-eslint/no-type-alias": "off", // Annoying
        "@typescript-eslint/no-unnecessary-condition": ["warn", { "ignoreRhs": true }],
        "@typescript-eslint/no-unnecessary-qualifier": "warn",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/no-unnecessary-type-assertion": "warn",
        "@typescript-eslint/no-unused-vars": "off", // VSCode flags these already
        "@typescript-eslint/no-use-before-define": "warn",
        "@typescript-eslint/no-useless-constructor": "warn",
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-namespace-keyword": "warn",
        "@typescript-eslint/prefer-readonly": "warn",
        "@typescript-eslint/prefer-regexp-exec": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "warn",
        "@typescript-eslint/promise-function-async": "warn",
        "@typescript-eslint/quotes": ["warn", "single"],
        "@typescript-eslint/require-array-sort-compare": "warn",
        "@typescript-eslint/require-await": "off", // Needed for class inheritance/interfaces
        "@typescript-eslint/restrict-plus-operands": "warn",
        "@typescript-eslint/semi": "warn",
        "@typescript-eslint/strict-boolean-expressions": "off", // Annoying
        "@typescript-eslint/triple-slash-reference": "warn",
        "@typescript-eslint/type-annotation-spacing": "warn",
        "@typescript-eslint/typedef": ["warn", { "arrowParameter": false }],
        "@typescript-eslint/unbound-method": "warn",
        "@typescript-eslint/unified-signatures": "off", // Often better to separate for clarity

        /* eslint-plugin-jsdoc */
        "jsdoc/check-alignment": "warn",
        "jsdoc/check-examples": "warn",
        "jsdoc/check-indentation": "warn",
        "jsdoc/check-param-names": "warn",
        "jsdoc/check-syntax": "warn",
        "jsdoc/check-tag-names": "warn",
        "jsdoc/check-types": "off", // Types not needed in TS
        "jsdoc/implements-on-classes": "off", // Not needed in TS
        "jsdoc/match-description": "off", // Not need
        "jsdoc/newline-after-description": ["warn", "never"],
        "jsdoc/no-types": "warn",
        "jsdoc/no-undefined-types": "off", // Turn off for TS
        "jsdoc/require-description": "warn",
        "jsdoc/require-description-complete-sentence": "off", // Annoying
        "jsdoc/require-example": "off", // Don't always want examples
        "jsdoc/require-hyphen-before-param-description": ["warn", "never"],
        "jsdoc/require-jsdoc": "off", // Autofixer doesn't work right and flags on overloads
        "jsdoc/require-param": "warn",
        "jsdoc/require-param-description": "warn",
        "jsdoc/require-param-name": "warn",
        "jsdoc/require-param-type": "off", // Redundant in TS
        "jsdoc/require-returns": "warn",
        "jsdoc/require-returns-check": "warn",
        "jsdoc/require-returns-description": "warn",
        "jsdoc/require-returns-type": "off", // Redundant in TS
        "jsdoc/valid-types": "off" // Not needed in TS
    }
}